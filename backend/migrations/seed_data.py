"""
Seed Data - T·∫°o d·ªØ li·ªáu m·∫´u cho Admin Panel
Bao g·ªìm: Super Admin account, Roles, Permissions, Categories m·∫´u
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database import DATABASE_URL
from models.user_models import User, Role, Permission, UserStatus
from models.product_models import Category
from models.settings_models import WebsiteSetting, ContactSetting, SeoSetting, AppearanceSetting
from passlib.context import CryptContext
from datetime import datetime

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def create_permissions(db_session):
    """
    T·∫°o c√°c quy·ªÅn c∆° b·∫£n cho h·ªá th·ªëng
    """
    print("üîê ƒêang t·∫°o permissions...")
    
    permissions_data = [
        # User Management Permissions
        {"name": "users.create", "description": "T·∫°o ng∆∞·ªùi d√πng m·ªõi", "resource": "users", "action": "create"},
        {"name": "users.read", "description": "Xem danh s√°ch ng∆∞·ªùi d√πng", "resource": "users", "action": "read"},
        {"name": "users.update", "description": "C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng", "resource": "users", "action": "update"},
        {"name": "users.delete", "description": "X√≥a ng∆∞·ªùi d√πng", "resource": "users", "action": "delete"},
        {"name": "users.approve", "description": "Duy·ªát t√†i kho·∫£n ng∆∞·ªùi d√πng", "resource": "users", "action": "approve"},
        
        # Product Management Permissions
        {"name": "products.create", "description": "T·∫°o s·∫£n ph·∫©m m·ªõi", "resource": "products", "action": "create"},
        {"name": "products.read", "description": "Xem danh s√°ch s·∫£n ph·∫©m", "resource": "products", "action": "read"},
        {"name": "products.update", "description": "C·∫≠p nh·∫≠t s·∫£n ph·∫©m", "resource": "products", "action": "update"},
        {"name": "products.delete", "description": "X√≥a s·∫£n ph·∫©m", "resource": "products", "action": "delete"},
        
        # Category Management Permissions
        {"name": "categories.create", "description": "T·∫°o danh m·ª•c m·ªõi", "resource": "categories", "action": "create"},
        {"name": "categories.read", "description": "Xem danh s√°ch danh m·ª•c", "resource": "categories", "action": "read"},
        {"name": "categories.update", "description": "C·∫≠p nh·∫≠t danh m·ª•c", "resource": "categories", "action": "update"},
        {"name": "categories.delete", "description": "X√≥a danh m·ª•c", "resource": "categories", "action": "delete"},
        
        # Settings Management Permissions
        {"name": "settings.read", "description": "Xem c√†i ƒë·∫∑t website", "resource": "settings", "action": "read"},
        {"name": "settings.update", "description": "C·∫≠p nh·∫≠t c√†i ƒë·∫∑t website", "resource": "settings", "action": "update"},
        
        # Dashboard Permissions
        {"name": "dashboard.read", "description": "Xem dashboard", "resource": "dashboard", "action": "read"},
        
        # System Admin Permissions
        {"name": "system.admin", "description": "Quy·ªÅn qu·∫£n tr·ªã h·ªá th·ªëng", "resource": "system", "action": "admin"},
    ]
    
    created_permissions = []
    for perm_data in permissions_data:
        # Ki·ªÉm tra xem permission ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_perm = db_session.query(Permission).filter(Permission.name == perm_data["name"]).first()
        if not existing_perm:
            permission = Permission(**perm_data)
            db_session.add(permission)
            created_permissions.append(permission)
    
    db_session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(created_permissions)} permissions!")
    return created_permissions

def create_roles(db_session):
    """
    T·∫°o c√°c vai tr√≤ c∆° b·∫£n
    """
    print("üë• ƒêang t·∫°o roles...")
    
    roles_data = [
        {
            "name": "super_admin",
            "display_name": "Super Administrator", 
            "description": "Quy·ªÅn cao nh·∫•t, c√≥ th·ªÉ l√†m m·ªçi th·ª©",
            "permissions": "all"  # S·∫Ω g√°n t·∫•t c·∫£ permissions
        },
        {
            "name": "admin",
            "display_name": "Administrator",
            "description": "Qu·∫£n tr·ªã vi√™n, c√≥ th·ªÉ qu·∫£n l√Ω users v√† products",
            "permissions": ["users.read", "users.update", "users.approve", "products.create", "products.read", "products.update", "products.delete", "categories.create", "categories.read", "categories.update", "categories.delete", "dashboard.read"]
        },
        {
            "name": "editor",
            "display_name": "Editor",
            "description": "Bi√™n t·∫≠p vi√™n, c√≥ th·ªÉ qu·∫£n l√Ω s·∫£n ph·∫©m",
            "permissions": ["products.create", "products.read", "products.update", "categories.read", "dashboard.read"]
        },
        {
            "name": "customer",
            "display_name": "Customer",
            "description": "Kh√°ch h√†ng th√¥ng th∆∞·ªùng",
            "permissions": []
        }
    ]
    
    # L·∫•y t·∫•t c·∫£ permissions
    all_permissions = db_session.query(Permission).all()
    permission_dict = {perm.name: perm for perm in all_permissions}
    
    created_roles = []
    for role_data in roles_data:
        # Ki·ªÉm tra xem role ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_role = db_session.query(Role).filter(Role.name == role_data["name"]).first()
        if not existing_role:
            role = Role(
                name=role_data["name"],
                display_name=role_data["display_name"],
                description=role_data["description"]
            )
            
            # G√°n permissions
            if role_data["permissions"] == "all":
                role.permissions = all_permissions
            else:
                role.permissions = [permission_dict[perm_name] for perm_name in role_data["permissions"] if perm_name in permission_dict]
            
            db_session.add(role)
            created_roles.append(role)
    
    db_session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(created_roles)} roles!")
    return created_roles

def create_super_admin(db_session):
    """
    T·∫°o t√†i kho·∫£n Super Admin theo y√™u c·∫ßu
    Username: Hpt
    Password: HptPttn7686
    Email: Khpt1976@gmail.com
    """
    print("üëë ƒêang t·∫°o Super Admin account...")
    
    # Ki·ªÉm tra xem Super Admin ƒë√£ t·ªìn t·∫°i ch∆∞a
    existing_admin = db_session.query(User).filter(User.username == "Hpt").first()
    if existing_admin:
        print("‚ö†Ô∏è Super Admin ƒë√£ t·ªìn t·∫°i!")
        return existing_admin
    
    # L·∫•y role super_admin
    super_admin_role = db_session.query(Role).filter(Role.name == "super_admin").first()
    if not super_admin_role:
        print("‚ùå Kh√¥ng t√¨m th·∫•y role super_admin!")
        return None
    
    # Hash password
    hashed_password = pwd_context.hash("HptPttn7686")
    
    # T·∫°o Super Admin user
    super_admin = User(
        username="Hpt",
        email="Khpt1976@gmail.com",
        full_name="Super Administrator",
        hashed_password=hashed_password,
        phone="",
        status=UserStatus.ACTIVE.value,
        role_id=super_admin_role.id,
        is_super_admin=True
    )
    
    db_session.add(super_admin)
    db_session.commit()
    
    print("‚úÖ ƒê√£ t·∫°o Super Admin account th√†nh c√¥ng!")
    print(f"   üë§ Username: Hpt")
    print(f"   üîë Password: HptPttn7686")
    print(f"   üìß Email: Khpt1976@gmail.com")
    
    return super_admin

def create_sample_categories(db_session):
    """
    T·∫°o c√°c danh m·ª•c s·∫£n ph·∫©m m·∫´u
    """
    print("üìÇ ƒêang t·∫°o sample categories...")
    
    categories_data = [
        {
            "name": "V√µng X·∫øp",
            "slug": "vong-xep",
            "description": "C√°c lo·∫°i v√µng x·∫øp, v√µng du l·ªãch, v√µng th∆∞ gi√£n",
            "image_url": "/images/categories/vong-xep.jpg",
            "is_active": True,
            "sort_order": 1
        },
        {
            "name": "R√®m - M√†n",
            "slug": "rem-man", 
            "description": "R√®m c·ª≠a, m√†n che n·∫Øng, r√®m trang tr√≠",
            "image_url": "/images/categories/rem-man.jpg",
            "is_active": True,
            "sort_order": 2
        },
        {
            "name": "Gi√° Ph∆°i ƒê·ªì",
            "slug": "gia-phoi-do",
            "description": "Gi√° ph∆°i qu·∫ßn √°o, gi√° treo ƒë·ªì ƒëa nƒÉng",
            "image_url": "/images/categories/gia-phoi.jpg",
            "is_active": True,
            "sort_order": 3
        },
        {
            "name": "B√†n Gh·∫ø",
            "slug": "ban-ghe",
            "description": "B√†n gh·∫ø x·∫øp, b√†n gh·∫ø du l·ªãch, n·ªôi th·∫•t",
            "image_url": "/images/categories/ban-ghe.jpg",
            "is_active": True,
            "sort_order": 4
        },
        {
            "name": "S·∫£n Ph·∫©m Kh√°c",
            "slug": "san-pham-khac",
            "description": "C√°c s·∫£n ph·∫©m ti·ªán √≠ch kh√°c",
            "image_url": "/images/categories/khac.jpg",
            "is_active": True,
            "sort_order": 5
        }
    ]
    
    created_categories = []
    for cat_data in categories_data:
        # Ki·ªÉm tra xem category ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_cat = db_session.query(Category).filter(Category.slug == cat_data["slug"]).first()
        if not existing_cat:
            category = Category(**cat_data)
            db_session.add(category)
            created_categories.append(category)
    
    db_session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(created_categories)} categories!")
    return created_categories

def create_website_settings(db_session):
    """
    T·∫°o c√†i ƒë·∫∑t website m·∫∑c ƒë·ªãnh
    """
    print("‚öôÔ∏è ƒêang t·∫°o website settings...")
    
    settings_data = [
        {"key": "site_name", "value": "C·ª≠a H√†ng Minh H√†", "label": "T√™n Website", "description": "T√™n website hi·ªÉn th·ªã"},
        {"key": "site_description", "value": "Chuy√™n cung c·∫•p v√µng x·∫øp, r√®m m√†n, gi√° ph∆°i ƒë·ªì, b√†n gh·∫ø ch·∫•t l∆∞·ª£ng cao", "label": "M√¥ t·∫£ Website", "description": "M√¥ t·∫£ ng·∫Øn v·ªÅ website"},
        {"key": "site_keywords", "value": "v√µng x·∫øp, r√®m m√†n, gi√° ph∆°i ƒë·ªì, b√†n gh·∫ø, n·ªôi th·∫•t", "label": "T·ª´ kh√≥a SEO", "description": "T·ª´ kh√≥a SEO cho website"},
        {"key": "contact_phone", "value": "0123456789", "label": "S·ªë ƒëi·ªán tho·∫°i", "description": "S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"},
        {"key": "contact_email", "value": "info@cuahangminhha.com", "label": "Email li√™n h·ªá", "description": "Email li√™n h·ªá ch√≠nh"},
        {"key": "contact_address", "value": "123 ƒê∆∞·ªùng ABC, Qu·∫≠n XYZ, TP.HCM", "label": "ƒê·ªãa ch·ªâ", "description": "ƒê·ªãa ch·ªâ c·ª≠a h√†ng"},
        {"key": "facebook_url", "value": "https://facebook.com/cuahangminhha", "label": "Facebook URL", "description": "Link trang Facebook"},
        {"key": "zalo_phone", "value": "0123456789", "label": "S·ªë Zalo", "description": "S·ªë ƒëi·ªán tho·∫°i Zalo"},
        {"key": "business_hours", "value": "8:00 - 18:00 (Th·ª© 2 - Ch·ªß nh·∫≠t)", "label": "Gi·ªù l√†m vi·ªác", "description": "Th·ªùi gian ho·∫°t ƒë·ªông"},
    ]
    
    created_settings = []
    for setting_data in settings_data:
        # Ki·ªÉm tra xem setting ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_setting = db_session.query(WebsiteSetting).filter(WebsiteSetting.key == setting_data["key"]).first()
        if not existing_setting:
            setting = WebsiteSetting(**setting_data)
            db_session.add(setting)
            created_settings.append(setting)
    
    db_session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(created_settings)} website settings!")
    return created_settings

def run_seed_data():
    """
    Ch·∫°y t·∫•t c·∫£ c√°c seed data
    """
    print("üå± B·∫Øt ƒë·∫ßu seed data cho Admin Panel...")
    print("=" * 50)
    
    # T·∫°o database session
    engine = create_engine(DATABASE_URL)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    db_session = SessionLocal()
    
    try:
        # 1. T·∫°o permissions
        create_permissions(db_session)
        
        # 2. T·∫°o roles
        create_roles(db_session)
        
        # 3. T·∫°o Super Admin
        create_super_admin(db_session)
        
        # 4. T·∫°o sample categories
        create_sample_categories(db_session)
        
        # 5. T·∫°o website settings
        create_website_settings(db_session)
        
        print("=" * 50)
        print("üéâ Seed data ho√†n th√†nh th√†nh c√¥ng!")
        print("\nüìã T√≥m t·∫Øt:")
        print("   üëë Super Admin: Hpt / HptPttn7686")
        print("   üìß Email: Khpt1976@gmail.com")
        print("   üîê Permissions: ƒê√£ t·∫°o ƒë·∫ßy ƒë·ªß")
        print("   üë• Roles: Super Admin, Admin, Editor, Customer")
        print("   üìÇ Categories: 5 danh m·ª•c s·∫£n ph·∫©m")
        print("   ‚öôÔ∏è Settings: C√†i ƒë·∫∑t website c∆° b·∫£n")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi seed data: {str(e)}")
        db_session.rollback()
        return False
        
    finally:
        db_session.close()
        engine.dispose()

if __name__ == "__main__":
    run_seed_data()