"""
FastAPI Main Application for Admin Panel
Entry point for the backend API server
"""

import os
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager
from typing import List, Optional
from pydantic import BaseModel

# Import API routers
from api.v1.auth import router as auth_router
from api.v1.users import router as users_router
from api.v1.products import router as products_router
from api.v1.settings import router as settings_router
from api.v1.dashboard import router as dashboard_router
from api.v1.public import router as public_router

# Import database
from database import create_tables

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan events
    """
    # Startup
    print("üöÄ Starting Admin Panel API Server...")
    
    # Create database tables
    create_tables()
    print("‚úÖ Database tables initialized")
    
    yield
    
    # Shutdown
    print("üõë Shutting down Admin Panel API Server...")

app = FastAPI(
    title="Admin Panel API - C·ª≠a H√†ng Minh H√†", 
    description="Backend API for Minh H√† Admin Panel - V√ïNG - R√àM - M√ÄN - GI√Å PH∆†I - B√ÄN GH·∫æ", 
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# Import config
from config import get_cors_origins, settings
from middleware.dynamic_cors import DynamicCORSMiddleware

# C·∫•u h√¨nh CORS - HO√ÄN TO√ÄN DYNAMIC
cors_origins = get_cors_origins()

# Use Dynamic CORS Middleware for better flexibility
app.add_middleware(
    DynamicCORSMiddleware,
    allow_development=True,
    allow_localhost=True
)

# Fallback CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=cors_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"],
    allow_headers=["*"],
)

# Trusted host middleware - ONLY for production
if settings.ENVIRONMENT == "production":
    # Only add trusted hosts in production
    production_hosts = ["localhost", "127.0.0.1"]
    if settings.cors_origins_list:
        # Extract hosts from CORS origins
        import re
        for origin in settings.cors_origins_list:
            match = re.match(r'https?://([^/]+)', origin)
            if match:
                production_hosts.append(match.group(1))
    
    app.add_middleware(
        TrustedHostMiddleware,
        allowed_hosts=production_hosts
    )

# Global exception handler
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """
    Global HTTP exception handler
    """
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "success": False,
            "message": exc.detail,
            "error_code": f"HTTP_{exc.status_code}",
            "path": str(request.url)
        }
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """
    Global exception handler for unhandled exceptions
    """
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "message": "Internal server error",
            "error_code": "INTERNAL_ERROR",
            "path": str(request.url)
        }
    )

# Health check endpoint
@app.get("/health")
async def health_check():
    """
    Health check endpoint
    """
    return {
        "status": "healthy",
        "service": "Admin Panel API",
        "version": "1.0.0"
    }

# Root endpoint
@app.get("/")
async def root():
    """
    Root endpoint with API information
    """
    return {
        "message": "Admin Panel API Server",
        "description": "Backend API for Minh H√† Admin Panel",
        "version": "1.0.0",
        "docs": "/docs",
        "redoc": "/redoc",
        "health": "/health"
    }

# Include API routers
app.include_router(auth_router, prefix="/api/v1")
app.include_router(users_router, prefix="/api/v1")
app.include_router(products_router, prefix="/api/v1")
app.include_router(settings_router, prefix="/api/v1")
app.include_router(dashboard_router, prefix="/api/v1")
app.include_router(public_router, prefix="/api/v1")  # Public API for frontend

# Include proxy router for CORS bypass
from routes.proxy import router as proxy_router
app.include_router(proxy_router)

# Mount static files
app.mount("/static", StaticFiles(directory="static"), name="static")

# Models
class Product(BaseModel):
    id: int
    title: str
    image: str
    price: Optional[str] = None
    original_price: Optional[str] = None
    rating: int = 5
    category: str

class ProductDetail(BaseModel):
    id: int
    name: str
    image: str
    price: Optional[str] = None
    originalPrice: Optional[str] = None
    rating: int = 5
    category: str
    description: str
    features: List[str]
    specifications: dict

class Category(BaseModel):
    id: int
    name: str
    slug: str
    products: List[Product]

# D·ªØ li·ªáu m·∫´u
sample_products = [
    # V√µng x·∫øp (8 s·∫£n ph·∫©m)
    {
        "id": 1,
        "title": "V√µng X·∫øp Ban Mai Inox Ki·ªÉu VIP",
        "image": "/static/images/product1.jpg",
        "price": "1.150.000ƒë",
        "original_price": "1.210.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 2,
        "title": "V√µng X·∫øp Duy Ph∆∞∆°ng Khung Inox Phi 27",
        "image": "/static/images/product2.jpg",
        "price": "780.000ƒë",
        "original_price": "950.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 3,
        "title": "V√µng X·∫øp Ch·∫•n Th√°i S∆°n Vu√¥ng 40",
        "image": "/static/images/product1.jpg",
        "price": "1.050.000ƒë",
        "original_price": "1.155.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 4,
        "title": "V√µng X·∫øp Duy L·ª£i Khung Th√©p C·ª° L·ªõn",
        "image": "/static/images/product2.jpg",
        "price": "1.548.000ƒë",
        "original_price": "1.720.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 13,
        "title": "V√µng X·∫øp Minh H√† Premium Inox 304",
        "image": "/static/images/product3.jpg",
        "price": "1.350.000ƒë",
        "original_price": "1.500.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 14,
        "title": "V√µng X·∫øp Gia ƒê√¨nh C·ª° ƒê·∫°i",
        "image": "/static/images/product1.jpg",
        "price": "1.680.000ƒë",
        "original_price": "1.850.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 15,
        "title": "V√µng X·∫øp Cho B√© An To√†n",
        "image": "/static/images/product2.jpg",
        "price": "650.000ƒë",
        "original_price": "750.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 16,
        "title": "V√µng X·∫øp Du L·ªãch G·∫•p G·ªçn",
        "image": "/static/images/product3.jpg",
        "price": "580.000ƒë",
        "original_price": "680.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 50,
        "title": "V√µng X·∫øp Cao C·∫•p Nh·∫≠p Kh·∫©u",
        "image": "/static/images/product1.jpg",
        "price": "1.850.000ƒë",
        "original_price": "2.200.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    {
        "id": 51,
        "title": "V√µng X·∫øp Th·ªÉ Thao Outdoor",
        "image": "/static/images/product2.jpg",
        "price": "920.000ƒë",
        "original_price": "1.150.000ƒë",
        "rating": 5,
        "category": "vong-xep"
    },
    # R√®m m√†n (6 s·∫£n ph·∫©m)
    {
        "id": 5,
        "title": "R√®m C·ª≠a Ch·ªëng N·∫Øng Cao C·∫•p",
        "image": "/static/images/product3.jpg",
        "price": "450.000ƒë",
        "original_price": "600.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 6,
        "title": "M√†n C·ª≠a S·ªï Ch·ªëng Mu·ªói Inox",
        "image": "/static/images/product1.jpg",
        "price": "320.000ƒë",
        "original_price": "450.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 7,
        "title": "R√®m Cu·ªën T·ª± ƒê·ªông Cao C·∫•p",
        "image": "/static/images/product2.jpg",
        "price": "850.000ƒë",
        "original_price": "1.200.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 17,
        "title": "R√®m V·∫£i Cao C·∫•p Ch·ªëng UV",
        "image": "/static/images/product3.jpg",
        "price": "680.000ƒë",
        "original_price": "850.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 18,
        "title": "M√†n Nh·ª±a PVC Trong Su·ªët",
        "image": "/static/images/product1.jpg",
        "price": "280.000ƒë",
        "original_price": "350.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 19,
        "title": "R√®m Tre T·ª± Nhi√™n Cao C·∫•p",
        "image": "/static/images/product2.jpg",
        "price": "520.000ƒë",
        "original_price": "650.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 52,
        "title": "R√®m C·ª≠a S·ªï Ch·ªëng Tia UV",
        "image": "/static/images/product3.jpg",
        "price": "380.000ƒë",
        "original_price": "480.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    {
        "id": 53,
        "title": "M√†n C·ª≠a L∆∞·ªõi Ch·ªëng C√¥n Tr√πng",
        "image": "/static/images/product1.jpg",
        "price": "290.000ƒë",
        "original_price": "380.000ƒë",
        "rating": 5,
        "category": "rem-man"
    },
    # Gi√° ph∆°i ƒë·ªì (5 s·∫£n ph·∫©m)
    {
        "id": 8,
        "title": "Gi√° Ph∆°i ƒê·ªì Inox 3 T·∫ßng Cao C·∫•p",
        "image": "/static/images/product1.jpg",
        "price": "680.000ƒë",
        "original_price": "850.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 9,
        "title": "Gi√° Ph∆°i ƒê·ªì Th√¥ng Minh G·∫•p G·ªçn",
        "image": "/static/images/product2.jpg",
        "price": "420.000ƒë",
        "original_price": "550.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 20,
        "title": "Gi√° Ph∆°i ƒê·ªì Treo T∆∞·ªùng Ti·∫øt Ki·ªám",
        "image": "/static/images/product3.jpg",
        "price": "350.000ƒë",
        "original_price": "450.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 21,
        "title": "Gi√° Ph∆°i ƒê·ªì L·∫Øp R√°p ƒêa NƒÉng",
        "image": "/static/images/product1.jpg",
        "price": "580.000ƒë",
        "original_price": "720.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 22,
        "title": "Gi√° Ph∆°i ƒê·ªì Ngo√†i Tr·ªùi Ch·ªëng G·ªâ",
        "image": "/static/images/product2.jpg",
        "price": "750.000ƒë",
        "original_price": "950.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 54,
        "title": "Gi√° Ph∆°i ƒê·ªì Th√¥ng Minh ƒêi·ªÅu Khi·ªÉn",
        "image": "/static/images/product3.jpg",
        "price": "1.250.000ƒë",
        "original_price": "1.550.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 55,
        "title": "Gi√° Ph∆°i ƒê·ªì G·ªó T·ª± Nhi√™n",
        "image": "/static/images/product1.jpg",
        "price": "680.000ƒë",
        "original_price": "850.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    {
        "id": 56,
        "title": "Gi√° Ph∆°i ƒê·ªì Mini Trong Nh√†",
        "image": "/static/images/product2.jpg",
        "price": "320.000ƒë",
        "original_price": "420.000ƒë",
        "rating": 5,
        "category": "gia-phoi"
    },
    # B√†n gh·∫ø (6 s·∫£n ph·∫©m)
    {
        "id": 10,
        "title": "B·ªô B√†n Gh·∫ø X·∫øp G·ªçn Gia ƒê√¨nh",
        "image": "/static/images/product1.jpg",
        "price": "1.250.000ƒë",
        "original_price": "1.500.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 11,
        "title": "Gh·∫ø X·∫øp Th∆∞ Gi√£n Cao C·∫•p",
        "image": "/static/images/product2.jpg",
        "price": "650.000ƒë",
        "original_price": "800.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 23,
        "title": "B√†n X·∫øp G·ªçn ƒêa NƒÉng",
        "image": "/static/images/product3.jpg",
        "price": "480.000ƒë",
        "original_price": "600.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 24,
        "title": "Gh·∫ø X·∫øp Inox Ch·ªëng G·ªâ",
        "image": "/static/images/product1.jpg",
        "price": "380.000ƒë",
        "original_price": "480.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 25,
        "title": "B·ªô B√†n Gh·∫ø Picnic Gia ƒê√¨nh",
        "image": "/static/images/product2.jpg",
        "price": "1.850.000ƒë",
        "original_price": "2.200.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 26,
        "title": "Gh·∫ø X·∫øp VƒÉn Ph√≤ng Ergonomic",
        "image": "/static/images/product3.jpg",
        "price": "920.000ƒë",
        "original_price": "1.150.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 57,
        "title": "B√†n X·∫øp G·ªçn Cao C·∫•p Nh·∫≠p Kh·∫©u",
        "image": "/static/images/product1.jpg",
        "price": "1.280.000ƒë",
        "original_price": "1.580.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    {
        "id": 58,
        "title": "Gh·∫ø X·∫øp Th∆∞ Gi√£n Massage",
        "image": "/static/images/product2.jpg",
        "price": "1.850.000ƒë",
        "original_price": "2.300.000ƒë",
        "rating": 5,
        "category": "ban-ghe"
    },
    # Gi√° treo ƒë·ªì (8 s·∫£n ph·∫©m)
    {
        "id": 12,
        "title": "Gi√° Treo ƒê·ªì ƒêa NƒÉng Inox",
        "image": "/static/images/product3.jpg",
        "price": "380.000ƒë",
        "original_price": "480.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 27,
        "title": "Gi√° Treo Qu·∫ßn √Åo Di ƒê·ªông",
        "image": "/static/images/product1.jpg",
        "price": "320.000ƒë",
        "original_price": "420.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 28,
        "title": "Gi√° Treo ƒê·ªì G·∫Øn T∆∞·ªùng",
        "image": "/static/images/product2.jpg",
        "price": "250.000ƒë",
        "original_price": "320.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 29,
        "title": "Gi√° Treo ƒê·ªì Cao C·∫•p 4 T·∫ßng",
        "image": "/static/images/product3.jpg",
        "price": "580.000ƒë",
        "original_price": "720.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 30,
        "title": "Gi√° Treo ƒê·ªì Th√¥ng Minh Xoay 360",
        "image": "/static/images/product1.jpg",
        "price": "450.000ƒë",
        "original_price": "550.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 31,
        "title": "Gi√° Treo ƒê·ªì G·ªó T·ª± Nhi√™n",
        "image": "/static/images/product2.jpg",
        "price": "680.000ƒë",
        "original_price": "850.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 32,
        "title": "Gi√° Treo ƒê·ªì Mini ƒê·ªÉ B√†n",
        "image": "/static/images/product3.jpg",
        "price": "180.000ƒë",
        "original_price": "250.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    {
        "id": 33,
        "title": "Gi√° Treo ƒê·ªì ƒê·ª©ng Cao C·∫•p",
        "image": "/static/images/product1.jpg",
        "price": "750.000ƒë",
        "original_price": "950.000ƒë",
        "rating": 5,
        "category": "gia-treo"
    },
    # S·∫£n ph·∫©m gi·∫£m gi√° hot (8 s·∫£n ph·∫©m)
    {
        "id": 34,
        "title": "V√µng X·∫øp Gi·∫£m Gi√° S·ªëc 50%",
        "image": "/static/images/product2.jpg",
        "price": "590.000ƒë",
        "original_price": "1.180.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 35,
        "title": "R√®m C·ª≠a Thanh L√Ω Gi√° R·∫ª",
        "image": "/static/images/product3.jpg",
        "price": "299.000ƒë",
        "original_price": "599.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 36,
        "title": "Gi√° Ph∆°i ƒê·ªì Outlet Sale",
        "image": "/static/images/product1.jpg",
        "price": "399.000ƒë",
        "original_price": "799.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 37,
        "title": "B√†n Gh·∫ø Combo Gi√° S·ªëc",
        "image": "/static/images/product2.jpg",
        "price": "999.000ƒë",
        "original_price": "1.999.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 38,
        "title": "V√µng X·∫øp H√†ng Tr∆∞ng B√†y",
        "image": "/static/images/product3.jpg",
        "price": "450.000ƒë",
        "original_price": "900.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 39,
        "title": "R√®m M√†n Cu·ªëi M√πa Gi·∫£m 60%",
        "image": "/static/images/product1.jpg",
        "price": "240.000ƒë",
        "original_price": "600.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 40,
        "title": "Gi√° Treo ƒê·ªì Flash Sale",
        "image": "/static/images/product2.jpg",
        "price": "199.000ƒë",
        "original_price": "399.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    {
        "id": 41,
        "title": "B√†n Gh·∫ø Thanh L√Ω Kho",
        "image": "/static/images/product3.jpg",
        "price": "799.000ƒë",
        "original_price": "1.599.000ƒë",
        "rating": 5,
        "category": "giam-gia"
    },
    # S·∫£n ph·∫©m kh√°c (8 s·∫£n ph·∫©m)
    {
        "id": 42,
        "title": "ƒê·ªám Ng·ªìi Cao Su Non",
        "image": "/static/images/product1.jpg",
        "price": "350.000ƒë",
        "original_price": "450.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 43,
        "title": "G·ªëi √îm Cao C·∫•p Memory Foam",
        "image": "/static/images/product2.jpg",
        "price": "280.000ƒë",
        "original_price": "380.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 44,
        "title": "ChƒÉn ƒêi·ªÅu H√≤a M√πa H√®",
        "image": "/static/images/product3.jpg",
        "price": "420.000ƒë",
        "original_price": "550.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 45,
        "title": "Ga Tr·∫£i Gi∆∞·ªùng Cotton 100%",
        "image": "/static/images/product1.jpg",
        "price": "320.000ƒë",
        "original_price": "420.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 46,
        "title": "V·ªè G·ªëi L·ª•a T∆° T·∫±m",
        "image": "/static/images/product2.jpg",
        "price": "180.000ƒë",
        "original_price": "250.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 47,
        "title": "N·ªám Cao Su Thi√™n Nhi√™n",
        "image": "/static/images/product3.jpg",
        "price": "2.500.000ƒë",
        "original_price": "3.200.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 48,
        "title": "B·ªô ChƒÉn Ga G·ªëi Cao C·∫•p",
        "image": "/static/images/product1.jpg",
        "price": "850.000ƒë",
        "original_price": "1.100.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    },
    {
        "id": 49,
        "title": "KhƒÉn Tr·∫£i Gi∆∞·ªùng Nhung",
        "image": "/static/images/product2.jpg",
        "price": "220.000ƒë",
        "original_price": "320.000ƒë",
        "rating": 5,
        "category": "san-pham-khac"
    }
]

categories_data = [
    {
        "id": 1,
        "name": "V√µng X·∫øp Cao C·∫•p",
        "slug": "vong-xep",
        "products": [p for p in sample_products if p["category"] == "vong-xep"]
    },
    {
        "id": 2,
        "name": "R√®m M√†n Ch·ªëng N·∫Øng",
        "slug": "rem-man",
        "products": [p for p in sample_products if p["category"] == "rem-man"]
    },
    {
        "id": 3,
        "name": "Gi√° Ph∆°i ƒê·ªì Th√¥ng Minh",
        "slug": "gia-phoi",
        "products": [p for p in sample_products if p["category"] == "gia-phoi"]
    },
    {
        "id": 4,
        "name": "B√†n Gh·∫ø Gia ƒê√¨nh",
        "slug": "ban-ghe",
        "products": [p for p in sample_products if p["category"] == "ban-ghe"]
    },
    {
        "id": 5,
        "name": "Gi√° Treo ƒê·ªì",
        "slug": "gia-treo",
        "products": [p for p in sample_products if p["category"] == "gia-treo"]
    },
    {
        "id": 6,
        "name": "Gi·∫£m Gi√° Hot",
        "slug": "giam-gia",
        "products": [p for p in sample_products if p["category"] == "giam-gia"]
    },
    {
        "id": 7,
        "name": "S·∫£n Ph·∫©m Kh√°c",
        "slug": "san-pham-khac",
        "products": [p for p in sample_products if p["category"] == "san-pham-khac"]
    }
]

# API Endpoints
@app.get("/")
async def root():
    return {"message": "C·ª≠a H√†ng Minh H√† API ƒëang ho·∫°t ƒë·ªông"}

@app.get("/api/products", response_model=List[Product])
async def get_products():
    """L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m"""
    return sample_products

@app.get("/api/products/{product_id}", response_model=ProductDetail)
async def get_product(product_id: int):
    """L·∫•y th√¥ng tin chi ti·∫øt s·∫£n ph·∫©m theo ID"""
    product = next((p for p in sample_products if p["id"] == product_id), None)
    if not product:
        from fastapi import HTTPException
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m")
    
    # T·∫°o th√¥ng tin chi ti·∫øt cho s·∫£n ph·∫©m
    detailed_product = {
        "id": product["id"],
        "name": product["title"],
        "image": product["image"],
        "price": product["price"],
        "originalPrice": product.get("original_price"),
        "rating": product["rating"],
        "category": product["category"],
        "description": get_product_description(product["id"], product["title"]),
        "features": get_product_features(product["id"], product["category"]),
        "specifications": get_product_specifications(product["id"], product["category"])
    }
    
    return detailed_product

def get_product_description(product_id: int, title: str) -> str:
    """T·∫°o m√¥ t·∫£ s·∫£n ph·∫©m d·ª±a tr√™n ID v√† t√™n"""
    descriptions = {
        "vong-xep": f"{title} l√† s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao, ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i v√† ch·∫•t li·ªáu b·ªÅn b·ªâ. S·∫£n ph·∫©m mang l·∫°i s·ª± tho·∫£i m√°i t·ªëi ƒëa cho ng∆∞·ªùi s·ª≠ d·ª•ng v·ªõi kh·∫£ nƒÉng g·∫•p g·ªçn ti·ªán l·ª£i, ph√π h·ª£p cho m·ªçi kh√¥ng gian s·ªëng.",
        "rem-man": f"{title} ƒë∆∞·ª£c s·∫£n xu·∫•t t·ª´ ch·∫•t li·ªáu cao c·∫•p, c√≥ kh·∫£ nƒÉng ch·ªëng n·∫Øng v√† b·∫£o v·ªá kh√¥ng gian s·ªëng c·ªßa b·∫°n. Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, d·ªÖ l·∫Øp ƒë·∫∑t v√† b·∫£o tr√¨, mang l·∫°i hi·ªáu qu·∫£ s·ª≠ d·ª•ng l√¢u d√†i.",
        "gia-phoi": f"{title} v·ªõi thi·∫øt k·∫ø th√¥ng minh, ti·∫øt ki·ªám kh√¥ng gian v√† t·ªëi ∆∞u h√≥a vi·ªác ph∆°i ƒë·ªì. Ch·∫•t li·ªáu inox cao c·∫•p ch·ªëng g·ªâ s√©t, ƒë·∫£m b·∫£o ƒë·ªô b·ªÅn v√† th·∫©m m·ªπ cho ng√¥i nh√† c·ªßa b·∫°n.",
        "ban-ghe": f"{title} ƒë∆∞·ª£c thi·∫øt k·∫ø ergonomic, mang l·∫°i s·ª± tho·∫£i m√°i t·ªëi ƒëa. Ch·∫•t li·ªáu cao c·∫•p, khung ch·∫Øc ch·∫Øn v√† c√≥ th·ªÉ g·∫•p g·ªçn d·ªÖ d√†ng, ph√π h·ª£p cho nhi·ªÅu m·ª•c ƒë√≠ch s·ª≠ d·ª•ng kh√°c nhau.",
        "gia-treo": f"{title} gi√∫p t·ªëi ∆∞u h√≥a kh√¥ng gian l∆∞u tr·ªØ v·ªõi thi·∫øt k·∫ø th√¥ng minh v√† hi·ªán ƒë·∫°i. Ch·∫•t li·ªáu b·ªÅn b·ªâ, kh·∫£ nƒÉng ch·ªãu t·∫£i cao v√† d·ªÖ d√†ng l·∫Øp ƒë·∫∑t.",
        "giam-gia": f"{title} - S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao v·ªõi m·ª©c gi√° ∆∞u ƒë√£i ƒë·∫∑c bi·ªát. ƒê√¢y l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ s·ªü h·ªØu s·∫£n ph·∫©m ch√≠nh h√£ng v·ªõi gi√° t·ªët nh·∫•t.",
        "san-pham-khac": f"{title} l√† s·∫£n ph·∫©m b·ªï sung ho√†n h·∫£o cho ng√¥i nh√† c·ªßa b·∫°n. Ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o, thi·∫øt k·∫ø tinh t·∫ø v√† mang l·∫°i gi√° tr·ªã s·ª≠ d·ª•ng cao."
    }
    
    # T√¨m category c·ªßa s·∫£n ph·∫©m
    product = next((p for p in sample_products if p["id"] == product_id), None)
    if product:
        category = product["category"]
        return descriptions.get(category, f"{title} l√† s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao t·ª´ C·ª≠a H√†ng Minh H√†.")
    
    return f"{title} l√† s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao t·ª´ C·ª≠a H√†ng Minh H√†."

def get_product_features(product_id: int, category: str) -> List[str]:
    """T·∫°o danh s√°ch t√≠nh nƒÉng d·ª±a tr√™n category"""
    features_map = {
        "vong-xep": [
            "Khung inox cao c·∫•p ch·ªëng g·ªâ s√©t",
            "V·∫£i b·ªÅn b·ªâ, tho√°ng m√°t",
            "G·∫•p g·ªçn d·ªÖ d√†ng, ti·∫øt ki·ªám kh√¥ng gian",
            "Thi·∫øt k·∫ø ergonomic tho·∫£i m√°i",
            "Tr·ªçng l∆∞·ª£ng nh·∫π, d·ªÖ di chuy·ªÉn",
            "B·∫£o h√†nh ch√≠nh h√£ng 12 th√°ng"
        ],
        "rem-man": [
            "Ch·∫•t li·ªáu ch·ªëng UV hi·ªáu qu·∫£",
            "D·ªÖ d√†ng l·∫Øp ƒë·∫∑t v√† th√°o r·ªùi",
            "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, th·∫©m m·ªπ cao",
            "Kh·∫£ nƒÉng ch·ªëng th·∫•m n∆∞·ªõc",
            "B·∫£o tr√¨ ƒë∆°n gi·∫£n",
            "ƒêa d·∫°ng m√†u s·∫Øc v√† k√≠ch th∆∞·ªõc"
        ],
        "gia-phoi": [
            "Inox 304 cao c·∫•p ch·ªëng g·ªâ",
            "Thi·∫øt k·∫ø th√¥ng minh, t·ªëi ∆∞u kh√¥ng gian",
            "Kh·∫£ nƒÉng ch·ªãu t·∫£i cao",
            "G·∫•p g·ªçn ti·ªán l·ª£i khi kh√¥ng s·ª≠ d·ª•ng",
            "Ph√π h·ª£p c·∫£ trong nh√† v√† ngo√†i tr·ªùi",
            "L·∫Øp ƒë·∫∑t ƒë∆°n gi·∫£n, kh√¥ng c·∫ßn d·ª•ng c·ª• ph·ª©c t·∫°p"
        ],
        "ban-ghe": [
            "Thi·∫øt k·∫ø ergonomic tho·∫£i m√°i",
            "Ch·∫•t li·ªáu cao c·∫•p, b·ªÅn b·ªâ",
            "G·∫•p g·ªçn d·ªÖ d√†ng, ti·∫øt ki·ªám kh√¥ng gian",
            "Khung ch·∫Øc ch·∫Øn, ·ªïn ƒë·ªãnh",
            "Ph√π h·ª£p nhi·ªÅu m·ª•c ƒë√≠ch s·ª≠ d·ª•ng",
            "Tr·ªçng l∆∞·ª£ng nh·∫π, d·ªÖ di chuy·ªÉn"
        ],
        "gia-treo": [
            "Thi·∫øt k·∫ø ƒëa nƒÉng, ti·∫øt ki·ªám kh√¥ng gian",
            "Ch·∫•t li·ªáu b·ªÅn b·ªâ, ch·ªãu t·∫£i cao",
            "L·∫Øp ƒë·∫∑t d·ªÖ d√†ng, kh√¥ng c·∫ßn khoan t∆∞·ªùng",
            "Ph√π h·ª£p nhi·ªÅu lo·∫°i qu·∫ßn √°o",
            "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, th·∫©m m·ªπ",
            "C√≥ th·ªÉ ƒëi·ªÅu ch·ªânh chi·ªÅu cao"
        ],
        "giam-gia": [
            "S·∫£n ph·∫©m ch√≠nh h√£ng, ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o",
            "Gi√° ∆∞u ƒë√£i ƒë·∫∑c bi·ªát, ti·∫øt ki·ªám chi ph√≠",
            "B·∫£o h√†nh ƒë·∫ßy ƒë·ªß nh∆∞ s·∫£n ph·∫©m th∆∞·ªùng",
            "S·ªë l∆∞·ª£ng c√≥ h·∫°n, c∆° h·ªôi hi·∫øm c√≥",
            "Ph√π h·ª£p cho m·ªçi gia ƒë√¨nh",
            "Giao h√†ng nhanh ch√≥ng"
        ],
        "san-pham-khac": [
            "Ch·∫•t l∆∞·ª£ng cao, an to√†n cho s·ª©c kh·ªèe",
            "Thi·∫øt k·∫ø tinh t·∫ø, hi·ªán ƒë·∫°i",
            "D·ªÖ s·ª≠ d·ª•ng v√† b·∫£o qu·∫£n",
            "Ph√π h·ª£p cho m·ªçi l·ª©a tu·ªïi",
            "Gi√° c·∫£ h·ª£p l√Ω, ch·∫•t l∆∞·ª£ng t·ªët",
            "B·∫£o h√†nh v√† h·ªó tr·ª£ t·∫≠n t√¨nh"
        ]
    }
    
    return features_map.get(category, [
        "Ch·∫•t l∆∞·ª£ng cao, b·ªÅn b·ªâ",
        "Thi·∫øt k·∫ø hi·ªán ƒë·∫°i, th·∫©m m·ªπ",
        "D·ªÖ s·ª≠ d·ª•ng v√† b·∫£o tr√¨",
        "Gi√° c·∫£ h·ª£p l√Ω",
        "B·∫£o h√†nh ch√≠nh h√£ng"
    ])

def get_product_specifications(product_id: int, category: str) -> dict:
    """T·∫°o th√¥ng s·ªë k·ªπ thu·∫≠t d·ª±a tr√™n category"""
    specs_map = {
        "vong-xep": {
            "material": "Khung inox 304, v·∫£i polyester cao c·∫•p",
            "size": "D√†i 190cm x R·ªông 60cm x Cao 35cm",
            "weight": "3.5 - 5.5 kg",
            "color": "ƒêa d·∫°ng m√†u s·∫Øc",
            "warranty": "12 th√°ng ch√≠nh h√£ng"
        },
        "rem-man": {
            "material": "V·∫£i polyester ch·ªëng UV, khung nh√¥m",
            "size": "T√πy ch·ªânh theo y√™u c·∫ßu",
            "weight": "1.5 - 3.0 kg/m¬≤",
            "color": "Nhi·ªÅu m√†u s·∫Øc l·ª±a ch·ªçn",
            "warranty": "24 th√°ng"
        },
        "gia-phoi": {
            "material": "Inox 304 cao c·∫•p",
            "size": "Cao 150-180cm, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh",
            "weight": "8 - 15 kg",
            "color": "Inox nguy√™n b·∫£n",
            "warranty": "36 th√°ng ch·ªëng g·ªâ"
        },
        "ban-ghe": {
            "material": "Khung th√©p/inox, m·∫∑t g·ªó/nh·ª±a cao c·∫•p",
            "size": "ƒêa d·∫°ng k√≠ch th∆∞·ªõc",
            "weight": "5 - 20 kg",
            "color": "Nhi·ªÅu m√†u s·∫Øc",
            "warranty": "18 th√°ng"
        },
        "gia-treo": {
            "material": "Inox/th√©p s∆°n tƒ©nh ƒëi·ªán",
            "size": "Cao 120-180cm, r·ªông 40-80cm",
            "weight": "3 - 8 kg",
            "color": "Tr·∫Øng, ƒëen, inox",
            "warranty": "24 th√°ng"
        },
        "giam-gia": {
            "material": "T√πy theo t·ª´ng s·∫£n ph·∫©m",
            "size": "ƒêa d·∫°ng",
            "weight": "T√πy s·∫£n ph·∫©m",
            "color": "Nhi·ªÅu l·ª±a ch·ªçn",
            "warranty": "12-24 th√°ng"
        },
        "san-pham-khac": {
            "material": "Ch·∫•t li·ªáu cao c·∫•p, an to√†n",
            "size": "ƒêa d·∫°ng k√≠ch th∆∞·ªõc",
            "weight": "T√πy s·∫£n ph·∫©m",
            "color": "Nhi·ªÅu m√†u s·∫Øc",
            "warranty": "12 th√°ng"
        }
    }
    
    return specs_map.get(category, {
        "material": "Ch·∫•t li·ªáu cao c·∫•p",
        "warranty": "12 th√°ng ch√≠nh h√£ng"
    })

@app.get("/api/categories", response_model=List[Category])
async def get_categories():
    """L·∫•y t·∫•t c·∫£ danh m·ª•c v√† s·∫£n ph·∫©m"""
    return categories_data

@app.get("/api/categories/{category_slug}", response_model=Category)
async def get_category(category_slug: str):
    """L·∫•y danh m·ª•c theo slug"""
    category = next((c for c in categories_data if c["slug"] == category_slug), None)
    if not category:
        return {"error": "Kh√¥ng t√¨m th·∫•y danh m·ª•c"}
    return category

@app.get("/api/search")
async def search_products(q: str):
    """T√¨m ki·∫øm s·∫£n ph·∫©m"""
    results = [p for p in sample_products if q.lower() in p["title"].lower()]
    return {"query": q, "results": results, "total": len(results)}

@app.get("/static/images/{image_name}")
async def get_image(image_name: str):
    """Serve h√¨nh ·∫£nh s·∫£n ph·∫©m"""
    image_path = f"static/images/{image_name}"
    if os.path.exists(image_path):
        return FileResponse(image_path)
    else:
        # Tr·∫£ v·ªÅ h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y
        default_path = "static/images/product1.jpg"
        if os.path.exists(default_path):
            return FileResponse(default_path)
        else:
            raise HTTPException(status_code=404, detail="Image not found")

# Additional middleware for request logging (optional)
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """
    Log all requests (optional middleware)
    """
    # You can add request logging here
    response = await call_next(request)
    return response

if __name__ == "__main__":
    import uvicorn
    
    # Development server configuration
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )